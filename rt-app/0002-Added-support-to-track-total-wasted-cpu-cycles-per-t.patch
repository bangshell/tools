From 31af5c73960c0973fb531c21a023e4d041ffc591 Mon Sep 17 00:00:00 2001
From: Parth <pshah015@in.ibm.com>
Date: Fri, 28 Sep 2018 16:43:20 +0530
Subject: [PATCH 2/3] Added support to track total wasted cpu cycles per thread

---
 src/rt-app.c       | 18 +++++++++++-------
 src/rt-app_utils.c |  2 +-
 2 files changed, 12 insertions(+), 8 deletions(-)

diff --git a/src/rt-app.c b/src/rt-app.c
index 1bfe7ba..84e7d1b 100644
--- a/src/rt-app.c
+++ b/src/rt-app.c
@@ -181,7 +181,7 @@ int calibrate_cpu_cycles(int clock)
 
 }
 
-static inline unsigned long loadwait(unsigned long exec)
+static inline unsigned long loadwait(unsigned long exec, int *ops)
 {
 	unsigned long load_count, secs, perf;
 	int i;
@@ -201,6 +201,7 @@ static inline unsigned long loadwait(unsigned long exec)
 
 	for (i = 0; i < secs; i++) {
 		load_count = 1000000000/p_load;
+		*ops += load_count+1;
 		waste_cpu_cycles(load_count);
 		exec -= 1000000;
 	}
@@ -210,6 +211,7 @@ static inline unsigned long loadwait(unsigned long exec)
 	 */
 	load_count = (exec * 1000)/p_load;
 	waste_cpu_cycles(load_count);
+	*ops += load_count+1;
 
 	return perf;
 }
@@ -252,7 +254,7 @@ static void memload(unsigned long count, struct _rtapp_iomem_buf *iomem)
 
 static int run_event(event_data_t *event, int dry_run,
 		unsigned long *perf, rtapp_resource_t *resources,
-		struct timespec *t_first, log_data_t *ldata)
+		struct timespec *t_first, log_data_t *ldata, int *ops)
 {
 	rtapp_resource_t *rdata = &(resources[event->res]);
 	rtapp_resource_t *ddata = &(resources[event->dep]);
@@ -320,7 +322,7 @@ static int run_event(event_data_t *event, int dry_run,
 			log_debug("run %d ", event->duration);
 			ldata->c_duration += event->duration;
 			clock_gettime(CLOCK_MONOTONIC, &t_start);
-			*perf += loadwait(event->duration);
+			*perf += loadwait(event->duration, ops);
 			clock_gettime(CLOCK_MONOTONIC, &t_end);
 			t_end = timespec_sub(&t_end, &t_start);
 			ldata->duration += timespec_to_usec(&t_end);
@@ -337,7 +339,7 @@ static int run_event(event_data_t *event, int dry_run,
 
 			do {
 				/* Do work for 32usec  */
-				*perf += loadwait(32);
+				*perf += loadwait(32, ops);
 
 				clock_gettime(CLOCK_MONOTONIC, &t_end);
 				diff_ns = timespec_sub_to_ns(&t_end, &t_start);
@@ -424,7 +426,7 @@ int run(int ind,
 	phase_data_t *pdata,
 	rtapp_resource_t *resources,
 	struct timespec *t_first,
-	log_data_t *ldata)
+	log_data_t *ldata, int *ops)
 {
 	event_data_t *events = pdata->events;
 	int nbevents = pdata->nbevents;
@@ -442,7 +444,7 @@ int run(int ind,
 						"[%d] executing %d",
 						ind, i);
 		lock += run_event(&events[i], !continue_running, &perf,
-				  resources, t_first, ldata);
+				  resources, t_first, ldata, ops);
 	}
 
 	return perf;
@@ -729,6 +731,7 @@ void *thread_body(void *arg)
 	unsigned int timings_size, timing_loop;
 	struct sched_attr attr;
 	int ret, phase, phase_loop, thread_loop, log_idx;
+	int ops = 0;
 
 	/* Set thread name */
 	ret = pthread_setname_np(pthread_self(), data->name);
@@ -834,7 +837,7 @@ void *thread_body(void *arg)
 		memset(&ldata, 0, sizeof(ldata));
 		clock_gettime(CLOCK_MONOTONIC, &t_start);
 		ldata.perf = run(data->ind, pdata, *(data->resources),
-				&t_first, &ldata);
+				&t_first, &ldata, &ops);
 		clock_gettime(CLOCK_MONOTONIC, &t_end);
 
 		if (timings)
@@ -913,6 +916,7 @@ void *thread_body(void *arg)
 		for (j = 0; j < log_idx; j++)
 			log_timing(data->log_handler, &timings[j]);
 	}
+	fprintf(data->log_handler,"Total wasted cycles =%d\n",ops);
 
 
 	if (opts.ftrace)
diff --git a/src/rt-app_utils.c b/src/rt-app_utils.c
index 7cc860b..ac53ad7 100644
--- a/src/rt-app_utils.c
+++ b/src/rt-app_utils.c
@@ -148,7 +148,7 @@ void
 log_timing(FILE *handler, timing_point_t *t)
 {
 	fprintf(handler,
-		"%4d %8lu %8lu %8lu %15llu %15llu %15llu %10ld %10lu %10lu %10lu %4d",
+		"%4d %8lu %8lu %8lu %15llu %15llu %15llu %10ld %10lu %10lu %10lu %10d",
 		t->ind,
 		t->perf,
 		t->duration,
-- 
2.17.1

