Add duty cycle to ebizzy.

Use one thread per cpu for calibration.

-a is the record number (per trhead) to yield
-i is the usleep delay in micro-seconds


Signed-off-by: Vaidyanathan Srinivasan <svaidy@linux.vnet.ibm.com>


Index: ebizzy-0.3/ebizzy.c
===================================================================
--- ebizzy-0.3.orig/ebizzy.c
+++ ebizzy-0.3/ebizzy.c
@@ -70,6 +70,9 @@ static unsigned int verbose;
 static unsigned int linear;
 static unsigned int touch_pages;
 static unsigned int no_lib_memcpy;
+static unsigned int sleep_at;
+static unsigned int sleep_interval;
+
 
 /*
  * Other global variables
@@ -129,13 +132,15 @@ read_options(int argc, char *argv[])
 	chunks = 10;
 	chunk_size = record_size * 64 * 1024;
 	seconds = 10;
+	sleep_at = 0;
+	sleep_interval = 1000;
 
 	/* On to option processing */
 
 	cmd = argv[0];
 	opterr = 1;
 
-	while ((c = getopt(argc, argv, "lmMn:pPRs:S:t:vzT")) != -1) {
+	while ((c = getopt(argc, argv, "lmMn:pPRs:S:t:vzTa:i:")) != -1) {
 		switch (c) {
 		case 'l':
 			no_lib_memcpy = 1;
@@ -184,6 +189,13 @@ read_options(int argc, char *argv[])
 		case 'z':
 			linear = 1;
 			break;
+		case 'a':
+			sleep_at = atoi(optarg);
+			break;
+		case 'i':
+			sleep_interval = atoi(optarg);
+			break;
+
 		default:
 			usage();
 		}
@@ -428,6 +440,8 @@ search_mem(void)
 		} /* end if ! touch_pages */
 
 		free_mem(copy, copy_size);
+		if (sleep_at && !(i % sleep_at))
+			usleep(sleep_interval);
 	}
 
 	return (i);
